Using cuda device
Traceback (most recent call last):
  File "G:\My Drive\Git\class_10623\hw0\handout\img_classifier_gray.py", line 196, in <module>
    main(args.n_epochs, args.batch_size, args.learning_rate)
  File "G:\My Drive\Git\class_10623\hw0\handout\img_classifier_gray.py", line 150, in main
    train_dataloader, test_dataloader = get_data(batch_size)
                                        ^^^^^^^^^^^^^^^^^^^^
  File "G:\My Drive\Git\class_10623\hw0\handout\img_classifier_gray.py", line 63, in get_data
    for X, y in train_dataloader:
                ^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torch\utils\data\dataloader.py", line 701, in __next__
    data = self._next_data()
           ^^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torch\utils\data\dataloader.py", line 757, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torch\utils\data\_utils\fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
            ~~~~~~~~~~~~^^^^^
  File "G:\My Drive\Git\class_10623\hw0\handout\img_classifier_gray.py", line 39, in __getitem__
    image = self.transform(image)
            ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torchvision\transforms\transforms.py", line 95, in __call__
    img = t(img)
          ^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torch\nn\modules\module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torch\nn\modules\module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torchvision\transforms\transforms.py", line 277, in forward
    return F.normalize(tensor, self.mean, self.std, self.inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torchvision\transforms\functional.py", line 350, in normalize
    return F_t.normalize(tensor, mean=mean, std=std, inplace=inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\82102\anaconda3\envs\class_10623\Lib\site-packages\torchvision\transforms\_functional_tensor.py", line 928, in normalize
    return tensor.sub_(mean).div_(std)
           ^^^^^^^^^^^^^^^^^
RuntimeError: output with shape [1, 256, 256] doesn't match the broadcast shape [3, 256, 256]
