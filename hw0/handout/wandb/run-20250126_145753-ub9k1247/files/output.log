Using cuda device
Shape of X [B, C, H, W]: torch.Size([8, 3, 256, 256])
Shape of y: torch.Size([8]) torch.int64
NeuralNetwork(
  (flatten): Flatten(start_dim=1, end_dim=-1)
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=196608, out_features=512, bias=True)
    (1): ReLU()
    (2): Linear(in_features=512, out_features=512, bias=True)
    (3): ReLU()
    (4): Linear(in_features=512, out_features=3, bias=True)
  )
)

Epoch 1
-------------------------------
Train batch avg loss = 1.057619  [    0/  451]
Train batch avg loss = 1.876824  [    0/  451]
Train batch avg loss = 1.162324  [    0/  451]
Train batch avg loss = 1.044085  [    0/  451]
Train batch avg loss = 1.288963  [    0/  451]
Train batch avg loss = 0.632395  [    0/  451]
Traceback (most recent call last):
  File "G:\My Drive\Git\class_10623\hw0\handout\img_classifier.py", line 169, in <module>
    main(args.n_epochs, args.batch_size, args.learning_rate)
  File "G:\My Drive\Git\class_10623\hw0\handout\img_classifier.py", line 146, in main
    evaluate(train_dataloader, "Train", model, loss_fn)
  File "G:\My Drive\Git\class_10623\hw0\handout\img_classifier.py", line 123, in evaluate
    avg_loss += loss_fn(pred, y).item()
                ^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
